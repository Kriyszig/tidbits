{"version":3,"sources":["static/img/avatar.jpg","components/topbar.js","components/about.js","components/cloud-snippet.js","pages/stage.js","pages/cloud.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TopBar","className","About","src","Avatar","alt","lazy","CloudSnippet","to","Stage","Cloud","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,oC,+QCa5BC,MAVf,WACE,OACE,yBAAKC,UAAU,UACb,0BAAMA,UAAU,QAAhB,a,uBCgBSC,MAlBf,WACE,OACE,yBAAKD,UAAU,SACb,yBAAKA,UAAU,SAASE,IAAKC,IAAQC,IAAI,KAAKC,MAAI,IAClD,uBAAGL,UAAU,SAAb,oBACmB,yBAAKA,UAAU,MAAf,WADnB,SAC0D,6BAD1D,2BAE0B,6BAF1B,2BAG0B,sCAAgB,6BAH1C,qBAIoB,wCAClB,6BAAM,6BALR,6CAM4C,6BAN5C,4CAO2C,6BAP3C,aAQY,oCARZ,eAQsC,oCARtC,2B,MCcSM,MAlBf,WACE,OACE,kBAAC,IAAD,CAAMN,UAAU,OAAOO,GAAI,qCACzB,yBAAKP,UAAU,qBACb,uBAAGA,UAAU,4BAAb,sCAGA,uBAAGA,UAAU,gBAAb,uBAGA,uBAAGA,UAAU,uBAAb,8G,MCEOQ,MAXf,WACE,OACE,yBAAKR,UAAU,mBACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,MACA,kBAAC,EAAD,S,MCuDOS,MA7Df,WACE,OACE,yBAAKT,UAAU,mBACb,yBAAKA,UAAU,SACb,kBAAC,IAAD,CAAMA,UAAU,OAAOO,GAAI,KACzB,yBAAKP,UAAU,SAAf,UADF,YAGA,uBAAGA,UAAU,YAAb,sCAGA,uBAAGA,UAAU,QAAb,uBAGA,yBAAKA,UAAU,aACb,ucAQA,ynBAWA,2BACE,0DAAoC,6BADtC,+IAGiE,6BAHjE,qTAUA,2jBASE,6BAAM,6BACN,4E,MCrCGU,MAZf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKV,UAAU,kBACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,kBAAC,IAAD,CAAOI,KAAK,oCAAoCC,UAAWJ,OCF/CK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9c22c2f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.2deaad0d.jpg\";","import React from 'react';\nimport './topbar.css';\n\nfunction TopBar() {\n  return (\n    <nav className=\"topbar\">\n      <span className=\"logo\">\n        TIDBITS\n      </span>\n    </nav>\n  )\n}\n\nexport default TopBar;","import React from 'react';\nimport Avatar from '../static/img/avatar.jpg'\nimport './about.css';\n\nfunction About() {\n  return (\n    <div className=\"about\">\n      <img className=\"avatar\" src={Avatar} alt=\"Me\" lazy />\n      <p className=\"intro\">\n        Hello there, I'm <kbd className=\"me\">Prateek</kbd> (^_^)<br />\n        An average 1x developer.<br />\n        Developing for web with <kbd>React</kbd><br />\n        & for mobile with <kbd>Flutter</kbd>\n        <br /><br />\n        Tidbits is a place for my shower thoughts.<br />\n        Some thoughts may be dark and disturbing!<br />\n        I may use <kbd>var</kbd> instead of <kbd>let</kbd> in my code snippets.\n      </p>\n    </div>\n  )\n}\n\nexport default About;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './snippet.css';\n\nfunction CloudSnippet() {\n  return(\n    <Link className=\"link\" to={'/posts/cloud-computing-and-arcade'}>\n      <div className=\"article-container\">\n        <p className=\"article-snippet-headline\">\n          Cloud Computing and Gaming Arcades\n        </p>\n        <p className=\"article-date\">\n          31st December, 2019\n        </p>\n        <p className=\"article-description\">\n          Comparing the striking similarities between the business of cloud computing and running a gaming arcade\n        </p>\n      </div>\n    </Link>\n  );\n}\n\nexport default CloudSnippet;\n","import React from 'react';\nimport About from '../components/about';\nimport CloudSnippet from '../components/cloud-snippet';\nimport './stage.css';\n\nfunction Stage() {\n  return(\n    <div className=\"stage-container\">\n      <div className=\"stage\">\n        <About />\n        <CloudSnippet />\n      </div>\n    </div>\n  )\n}\n\nexport default Stage;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './article.css';\n\nfunction Cloud() {\n  return (\n    <div className=\"stage-container\">\n      <div className=\"stage\">\n        <Link className=\"link\" to={'/'}>\n          <kbd className=\"arrow\">â—€</kbd> Go Back\n        </Link>\n        <p className=\"headline\">\n          Cloud Computing and Gaming Arcades\n        </p>\n        <p className=\"date\">\n          31st December, 2019\n        </p>\n        <div className=\"post-body\">\n          <p>\n            When I was young, I loved playing the game Pac-Man. All you needed was a\n            coin to drop into the tin box and you were the master of the pixels on\n            that tiny screen. Today, over a decade later, things have changed. I no\n            longer play Pac-Man. Instead I play Doom Eternal on Google Stadia while\n            my machine learning model is trained on Google's Cloud Server. Although,\n            the toys have changed, the core concept still remains the same.\n          </p>\n          <p>\n            Buying a Pac-Man Arcade machine back in the days cost a fortune. But that\n            didn't stop the dream. A wise man decided to share what was his with us\n            for a tiny reasonable price. The way I see it, Cloud Computing is no\n            different - I couldn't afford a rig to play the latest and greatest\n            demanding games, nor can I afford one to train a Machine Learning model\n            in a reasonable amount of time. So I rent one. I play a game while the,\n            server does the heavy lifting. I see the epochs go by as the RTX in some\n            corner of Google's Datacenter trying to teach itself how to differentiate\n            between a Horse and a Zebra.  \n          </p>\n          <p>\n            <kbd>What does it all signify?</kbd><br />\n            Given there are similarities in how a Cloud Computing Business and an Gaming\n            Arcade work, we can use insights from one to improve the other.<br />\n            The arcade that once stood at the corner of our street is no more. It had\n            to shut its door forever. The cause of this? Well, a simple revolution\n            called gaming consoles. Gaming consoles opened the door to so much more\n            potential. The failure of Arcades to react to these changes cause it's\n            massive downfall.            \n          </p>\n          <p>\n            This is why it's important to innovate and that's why the Cloud Computing\n            businesses and startups are striving to be the first at something or other.\n            Some are fast. Some are cheap. Some allow you to tinker on Windows while\n            others offer a chance to tinker on your favorite Linux Distribution. They\n            allow you to orchestrate Containers remotely. They provide runtime for new\n            technologies. Everything is possible by typing a series of commands on a\n            terminal on your screen. The innovation drives the survival, the survival\n            drives the innovation.\n            <br /><br />\n            <kbd>The game is simple. Hunt or be Hunted.</kbd>\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Cloud;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport TopBar from './components/topbar';\nimport Stage from './pages/stage';\nimport Cloud from './pages/cloud';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"hero-container\">\n        <TopBar />\n        <Route exact path=\"/\" component={Stage} />\n        <Route path=\"/posts/cloud-computing-and-arcade\" component={Cloud} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}